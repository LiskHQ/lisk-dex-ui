import { Box, Typography } from '@mui/material';
import { faChevronRight } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { FeaturedPools, InfoChart, PoolsTable, TokensTable, TransactionsTable } from 'components';
import { OverviewComponentStyle } from './index.style';
import { useContext, useMemo, useState } from 'react';
import { ITokenDetail, IPoolDetail, ITransaction, IToken } from 'models';
import { createMockChartInfo } from '__mock__';
import { PlatformContext } from 'contexts';
import { currencySymbols } from 'consts';

export interface IOverviewComponentProps {
  transactions: ITransaction[],
  tokenDetails: ITokenDetail[],
  poolDetails: IPoolDetail[],
  availableTokens: IToken[],
  onSwap: (token1: string, token2?: string) => void,
  onAddLiquidity: (token1: string, token2?: string) => void,
  onSelectPool: (id: string) => void,
  onSelectToken: (id: string) => void,
  onChangeTransactionCommand?: (value: string) => void,
}

export const OverviewComponent: React.FC<IOverviewComponentProps> = (props) => {
  const {
    transactions,
    availableTokens,
    poolDetails,
    tokenDetails,
    onSwap,
    onAddLiquidity,
    onSelectPool,
    onSelectToken,
    onChangeTransactionCommand,
  } = props;

  const chartData = useMemo(() => {
    return createMockChartInfo();
  }, []);

  // pools table control
  const [isAsc, setAsc] = useState<boolean>();
  const [sortKey, setSortKey] = useState<string>('');

  const { currency } = useContext(PlatformContext);

  const pools = useMemo(() => {
    return poolDetails
      .slice(0, 9)
      .sort((a: any, b: any) => isAsc ? a[sortKey] - b[sortKey] : b[sortKey] - a[sortKey]);
  }, [sortKey, isAsc, poolDetails]);

  const onSortClick = (key: string) => {
    if (key !== sortKey) {
      setAsc(false);
      setSortKey(key);
    } else {
      setAsc(!isAsc);
    }
  };

  // tokens table control
  const [isTokenAsc, setTokenAsc] = useState<boolean>();
  const [sortTokenKey, setSortTokenKey] = useState<string>('');

  const tokens = useMemo(() => {
    if (sortTokenKey)
      return tokenDetails
        .sort((a: any, b: any) => isTokenAsc ? a[sortTokenKey] - b[sortTokenKey] : b[sortTokenKey] - a[sortTokenKey]);
    return [...tokenDetails];
  }, [sortTokenKey, isTokenAsc, tokenDetails]);

  const onSortTokenClick = (key: string) => {
    if (key !== sortTokenKey) {
      setTokenAsc(false);
      setSortTokenKey(key);
    } else {
      setTokenAsc(!isTokenAsc);
    }
  };
  // transactions table control
  const [transactionsPage, setTransactionsPage] = useState<number>(1);
  const [transactionsLimit, setTransactionsLimit] = useState<number>(10);
  const transactionsTotalPages = useMemo(() => {
    return Math.ceil(transactions.length / transactionsLimit);
  }, [transactionsLimit, transactions]);

  const infoChartSummary = useMemo(() => {
    return [
      {
        title: `${tokenDetails[0] ? tokenDetails[0].symbol : ''} Price`,
        value: `${currencySymbols[currency]}${tokenDetails[0] ? tokenDetails[0].price : ''}`,
        changePercent: tokenDetails[0] ? tokenDetails[0].priceChange : '',
      },
      {
        title: 'Total Liquidity',
        value: `${currencySymbols[currency]}${tokenDetails[0] ? tokenDetails[0].liquidity : ''}`,
        changePercent: 2.32,
      },
      {
        title: 'Volume 24h',
        value: `${currencySymbols[currency]}${tokenDetails[0] ? tokenDetails[0].volume24H : ''}`,
        changePercent: 1.45,
      },
      {
        title: 'Fees 24h',
        value: '$48.9k',
        changePercent: 4.86
      },
      {
        title: 'Transactions 24h',
        value: 216
      }
    ];
  }, [currency, tokenDetails]);

  return (
    <OverviewComponentStyle>
      <Box className="info-header">
        <Typography variant="subtitle1">Overview</Typography>
        <Typography variant="body1">View and track liquidity, volume and fees generated by the Lisk decentralized exchange.</Typography>
      </Box>

      <InfoChart
        chartData={chartData}
        tabs={['Liquidity', 'TVL']}
        infoChartSummary={infoChartSummary}
        onTabChange={() => { }}
      />

      <Box className="table-title">
        <Typography variant="subtitle1">Featured Pools</Typography>
      </Box>
      <FeaturedPools
        poolDetails={poolDetails}
        onSelectPool={onSelectPool}
      />

      <Box className="table-title">
        <Typography variant="subtitle1">Top Tokens</Typography>
        <Box className="view-all">
          <Typography variant="body2">View all tokens</Typography>
          <FontAwesomeIcon icon={faChevronRight} />
        </Box>
      </Box>

      <TokensTable
        tokens={tokens}
        isAsc={isTokenAsc}
        sortKey={sortTokenKey}
        onSortClick={onSortTokenClick}
        onSelectToken={onSelectToken}
        onSwap={onSwap}
        onAddLiquidity={onAddLiquidity}
      />

      <Box className="table-title">
        <Typography variant="subtitle1">Top Pools</Typography>
        <Box className="view-all">
          <Typography variant="body2">View all tokens</Typography>
          <FontAwesomeIcon icon={faChevronRight} />
        </Box>
      </Box>
      <PoolsTable
        pools={pools}
        onSortClick={onSortClick}
        onSelectPool={onSelectPool}
        sortKey={sortKey}
        isAsc={isAsc}
        onSwap={onSwap}
        onAddLiquidity={onAddLiquidity}
      />

      <Box className="table-title">
        <Typography variant="subtitle1">Transactions</Typography>
      </Box>
      <TransactionsTable
        transactions={transactions}
        availableTokens={availableTokens}
        page={transactionsPage}
        limit={transactionsLimit}
        totalPages={transactionsTotalPages}
        onChangeCommand={onChangeTransactionCommand}
        onChangeRowCount={value => setTransactionsLimit(value)}
        onNextPage={() => setTransactionsPage(Math.min(transactionsPage + 1, transactionsTotalPages))}
        onPreviousPage={() => setTransactionsPage(Math.max(transactionsPage - 1, 1))}
      />
    </OverviewComponentStyle>
  );
};