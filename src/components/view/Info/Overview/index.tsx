import { Box, Typography } from '@mui/material';
import { faChevronRight } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { FeaturedPools, InfoChart, PoolsTable, TokensTable, TransactionsTable } from 'components';
import { OverviewComponentStyle } from './index.style';
import { useMemo, useState } from 'react';
import { createMockChartInfo, mockPoolDetails, mockTokenDetails } from '__mock__';

export interface IOverviewComponentProps {
  onSwap: (token1: string, token2?: string) => void,
  onAddLiquidity: (token1: string, token2?: string) => void,
  onSelectPool: (id: string) => void,
  onSelectToken: (id: string) => void,
}

export const OverviewComponent: React.FC<IOverviewComponentProps> = (props) => {
  const {
    onSwap,
    onAddLiquidity,
    onSelectPool,
    onSelectToken,
  } = props;

  const chartData = useMemo(() => {
    return createMockChartInfo();
  }, []);

  // pools table control
  const [isAsc, setAsc] = useState<boolean>();
  const [sortKey, setSortKey] = useState<string>('');

  const pools = useMemo(() => {
    return mockPoolDetails
      .slice(0, 9)
      .sort((a: any, b: any) => isAsc ? a[sortKey] - b[sortKey] : b[sortKey] - a[sortKey]);
  }, [sortKey, isAsc]);

  const onSortClick = (key: string) => {
    if (key !== sortKey) {
      setAsc(false);
      setSortKey(key);
    } else {
      setAsc(!isAsc);
    }
  };

  // tokens table control
  const [isTokenAsc, setTokenAsc] = useState<boolean>();
  const [sortTokenKey, setSortTokenKey] = useState<string>('');

  const tokens = useMemo(() => {
    return mockTokenDetails
      .sort((a: any, b: any) => isTokenAsc ? a[sortTokenKey] - b[sortTokenKey] : b[sortTokenKey] - a[sortTokenKey]);
  }, [sortTokenKey, isTokenAsc]);

  const onSortTokenClick = (key: string) => {
    if (key !== sortTokenKey) {
      setTokenAsc(false);
      setSortTokenKey(key);
    } else {
      setTokenAsc(!isTokenAsc);
    }
  };
  // transactions table control
  const [transactionsPage, setTransactionsPage] = useState<number>(1);
  const [transactionsLimit, setTransactionsLimit] = useState<number>(10);
  const transactionsTotalPages = useMemo(() => {
    return Math.ceil(10 / transactionsLimit);
  }, [transactionsLimit]);

  return (
    <OverviewComponentStyle>
      <Box className="info-header">
        <Typography variant="subtitle1">Overview</Typography>
        <Typography variant="body1">View and track liquidity, volume and fees generated by the Lisk decentralized exchange.</Typography>
      </Box>

      <InfoChart chartData={chartData} />

      <Box className="table-title">
        <Typography variant="subtitle1">Featured Pools</Typography>
      </Box>
      <FeaturedPools onSelectPool={onSelectPool} />

      <Box className="table-title">
        <Typography variant="subtitle1">Top Tokens</Typography>
        <Box className="view-all">
          <Typography variant="body2">View all tokens</Typography>
          <FontAwesomeIcon icon={faChevronRight} />
        </Box>
      </Box>
      <TokensTable
        tokens={tokens}
        isAsc={isTokenAsc}
        sortKey={sortTokenKey}
        onSortClick={onSortTokenClick}
        onSelectToken={onSelectToken}
        onSwap={onSwap}
        onAddLiquidity={onAddLiquidity}
      />


      <Box className="table-title">
        <Typography variant="subtitle1">Top Pools</Typography>
        <Box className="view-all">
          <Typography variant="body2">View all tokens</Typography>
          <FontAwesomeIcon icon={faChevronRight} />
        </Box>
      </Box>
      <PoolsTable
        pools={pools}
        onSortClick={onSortClick}
        onSelectPool={onSelectPool}
        sortKey={sortKey}
        isAsc={isAsc}
        onSwap={onSwap}
        onAddLiquidity={onAddLiquidity}
      />

      <Box className="table-title">
        <Typography variant="subtitle1">Transactions</Typography>
      </Box>
      <TransactionsTable
        page={transactionsPage}
        limit={transactionsLimit}
        totalPages={transactionsTotalPages}
        onChangeRowCount={value => setTransactionsLimit(value)}
        onNextPage={() => setTransactionsPage(Math.min(transactionsPage + 1, transactionsTotalPages))}
        onPreviousPage={() => setTransactionsPage(Math.max(transactionsPage - 1, 1))}
      />
    </OverviewComponentStyle>
  );
};